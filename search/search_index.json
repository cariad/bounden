{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Bounden Bounden describes points and regions within n -dimensional space. Installation Bounden requires Python 3.10 or later and can be installed from PyPI . pip install bounden Support Please raise bugs, feature requests and ask questions at cariad/bounden/issues . The Project Bounden is \u00a9 2022 Cariad Eccleston and released under the MIT License at cariad/nvalues . The Author Hello! \ud83d\udc4b I'm Cariad Eccleston and I'm a freelance backend and infrastructure engineer in the United Kingdom. You can find me at cariad.earth , github/cariad , linkedin/cariad and on Mastodon at @cariad@tech.lgbt .","title":"Bounden"},{"location":"#bounden","text":"Bounden describes points and regions within n -dimensional space.","title":"Bounden"},{"location":"#installation","text":"Bounden requires Python 3.10 or later and can be installed from PyPI . pip install bounden","title":"Installation"},{"location":"#support","text":"Please raise bugs, feature requests and ask questions at cariad/bounden/issues .","title":"Support"},{"location":"#the-project","text":"Bounden is \u00a9 2022 Cariad Eccleston and released under the MIT License at cariad/nvalues .","title":"The Project"},{"location":"#the-author","text":"Hello! \ud83d\udc4b I'm Cariad Eccleston and I'm a freelance backend and infrastructure engineer in the United Kingdom. You can find me at cariad.earth , github/cariad , linkedin/cariad and on Mastodon at @cariad@tech.lgbt .","title":"The Author"},{"location":"points/","text":"Points classes The Point class describes a point in n -dimensional space. The Point2 class wraps and simplifies Point to describe a point in two-dimensional space.","title":"Points classes"},{"location":"points/#points-classes","text":"The Point class describes a point in n -dimensional space. The Point2 class wraps and simplifies Point to describe a point in two-dimensional space.","title":"Points classes"},{"location":"points/point/","text":"Point class The Point class describes a point in n -dimensional space. The class' generic type describes the coordinate type of each dimension, and must be specified as a tuple: from bounden import Point in_line = Point [ tuple [ int ]](( 0 ,)) in_rect = Point [ tuple [ int , int ]](( 0 , 0 )) in_cube = Point [ tuple [ int , int , int ]](( 0 , 0 , 0 )) Coordinates are read from the value property: from bounden import Point point = Point [ tuple [ int , int , int ]](( 1 , 2 , 3 )) print ( point . value ) # (1, 2, 3)","title":"Point class"},{"location":"points/point/#point-class","text":"The Point class describes a point in n -dimensional space. The class' generic type describes the coordinate type of each dimension, and must be specified as a tuple: from bounden import Point in_line = Point [ tuple [ int ]](( 0 ,)) in_rect = Point [ tuple [ int , int ]](( 0 , 0 )) in_cube = Point [ tuple [ int , int , int ]](( 0 , 0 , 0 )) Coordinates are read from the value property: from bounden import Point point = Point [ tuple [ int , int , int ]](( 1 , 2 , 3 )) print ( point . value ) # (1, 2, 3)","title":"Point class"},{"location":"points/point2/","text":"Point2 class The Point2 class wraps and simplifies the Point class to describe a point in two-dimensional space. The class requires two generic types: the types of the x and y axis respectively: from bounden import Point2 in_int_rectangle = Point2 [ int , int ]( 2 , 4 ) in_float_rectangle = Point2 [ float , float ]( 1.2 , 1.4 ) in_spreadsheet = Point2 [ str , int ]( \"A\" , 7 ) Coordinates are read from the x and y properties.","title":"Point2 class"},{"location":"points/point2/#point2-class","text":"The Point2 class wraps and simplifies the Point class to describe a point in two-dimensional space. The class requires two generic types: the types of the x and y axis respectively: from bounden import Point2 in_int_rectangle = Point2 [ int , int ]( 2 , 4 ) in_float_rectangle = Point2 [ float , float ]( 1.2 , 1.4 ) in_spreadsheet = Point2 [ str , int ]( \"A\" , 7 ) Coordinates are read from the x and y properties.","title":"Point2 class"},{"location":"regions/","text":"Regions classes The Region class describes a region of n -dimensional space. The Region2 class wraps and simplifies Region to describe a region of two-dimensional space.","title":"Regions classes"},{"location":"regions/#regions-classes","text":"The Region class describes a region of n -dimensional space. The Region2 class wraps and simplifies Region to describe a region of two-dimensional space.","title":"Regions classes"},{"location":"regions/region/","text":"Region class The Region class describes a region of n -dimensional space. Construction Two generic types are required: Tuple of axis types Tuple of axis length types You must also initialise the region with: The position of the region's origin The lengths of each of the region's dimensions Construction examples Given one-dimensional space with an integer axis, this code describes the region that starts at (2) and is 3 units wide: from bounden import Region region = Region [ tuple [ int ], # Axes tuple [ float ], # Axis lengths ]( ( 2 ,), ( 3 ,), ) # 0 1 2 3 4 5 6 # . . [x x x] . . Given one-dimensional space with a string axis, this code describes the region that starts at (C) and is 3 strings wide: from bounden import Region region = Region [ tuple [ str ], # Axes tuple [ float ], # Axis lengths ]( ( \"C\" ,), ( 3 ,), ) # A B C D E F # . . [x x x] . Given two-dimensional space with integer axes, this code describes the region that starts at (1, 2) , is 3 units wide and 4 units tall: from bounden import Region region = Region [ tuple [ int , int ], # Axes tuple [ float , float ], # Axis lengths ]( ( 1 , 2 ), ( 3 , 4 ), ) # 0 1 2 3 4 5 # 0 . . . . . . # 1 . . . . . . # 2 . [x x x] . . # 3 . [x x x] . . # 4 . [x x x] . . # 5 . [x x x] . . # 6 . . . . . . Given two-dimensional space with a string y axis and integer x axis, this code describes the region that starts at (B, 2) , is 3 units wide and 4 units tall: from bounden import Region region = Region [ tuple [ str , int ], # Axes tuple [ float , float ], # Axis lengths ]( ( \"B\" , 2 ), ( 3 , 4 ), ) # A B C D E F # 0 . . . . . . # 1 . . . . . . # 2 . [x x x] . . # 3 . [x x x] . . # 4 . [x x x] . . # 5 . [x x x] . . # 6 . . . . . . Properties The region's position is read from the position property. The lengths are read from the lengths property.","title":"Region class"},{"location":"regions/region/#region-class","text":"The Region class describes a region of n -dimensional space.","title":"Region class"},{"location":"regions/region/#construction","text":"Two generic types are required: Tuple of axis types Tuple of axis length types You must also initialise the region with: The position of the region's origin The lengths of each of the region's dimensions","title":"Construction"},{"location":"regions/region/#construction-examples","text":"Given one-dimensional space with an integer axis, this code describes the region that starts at (2) and is 3 units wide: from bounden import Region region = Region [ tuple [ int ], # Axes tuple [ float ], # Axis lengths ]( ( 2 ,), ( 3 ,), ) # 0 1 2 3 4 5 6 # . . [x x x] . . Given one-dimensional space with a string axis, this code describes the region that starts at (C) and is 3 strings wide: from bounden import Region region = Region [ tuple [ str ], # Axes tuple [ float ], # Axis lengths ]( ( \"C\" ,), ( 3 ,), ) # A B C D E F # . . [x x x] . Given two-dimensional space with integer axes, this code describes the region that starts at (1, 2) , is 3 units wide and 4 units tall: from bounden import Region region = Region [ tuple [ int , int ], # Axes tuple [ float , float ], # Axis lengths ]( ( 1 , 2 ), ( 3 , 4 ), ) # 0 1 2 3 4 5 # 0 . . . . . . # 1 . . . . . . # 2 . [x x x] . . # 3 . [x x x] . . # 4 . [x x x] . . # 5 . [x x x] . . # 6 . . . . . . Given two-dimensional space with a string y axis and integer x axis, this code describes the region that starts at (B, 2) , is 3 units wide and 4 units tall: from bounden import Region region = Region [ tuple [ str , int ], # Axes tuple [ float , float ], # Axis lengths ]( ( \"B\" , 2 ), ( 3 , 4 ), ) # A B C D E F # 0 . . . . . . # 1 . . . . . . # 2 . [x x x] . . # 3 . [x x x] . . # 4 . [x x x] . . # 5 . [x x x] . . # 6 . . . . . .","title":"Construction examples"},{"location":"regions/region/#properties","text":"The region's position is read from the position property. The lengths are read from the lengths property.","title":"Properties"},{"location":"regions/region2/","text":"Region2 class The Region2 class wraps and simplifies the Region class to describe a region of two-dimensional space. Construction Two generic types are required: X axis type Y axis type You must also initialise the region with its x and y coordinates, width and height. Construction examples Given a grid with integer axes, this code describes the region that starts at (1, 2) , is 3 units wide and 4 units tall: from bounden import Region2 region = Region2 [ int , int ](( 1 , 2 ), ( 3 , 4 )) # 0 1 2 3 4 5 # 0 . . . . . . # 1 . . . . . . # 2 . [x x x] . . # 3 . [x x x] . . # 4 . [x x x] . . # 5 . [x x x] . . # 6 . . . . . . Given a grid with a string y axis and integer x axis, this code describes the region that starts at (B, 2) , is 3 units wide and 4 units tall: from bounden import Region region = Region2 [ str , int ](( 1 , 2 ), ( 3 , 4 )) # A B C D E F # 0 . . . . . . # 1 . . . . . . # 2 . [x x x] . . # 3 . [x x x] . . # 4 . [x x x] . . # 5 . [x x x] . . # 6 . . . . . . Properties The region's position is read from the position property. The region's width and height are read from the width and height properties.","title":"Region2 class"},{"location":"regions/region2/#region2-class","text":"The Region2 class wraps and simplifies the Region class to describe a region of two-dimensional space.","title":"Region2 class"},{"location":"regions/region2/#construction","text":"Two generic types are required: X axis type Y axis type You must also initialise the region with its x and y coordinates, width and height.","title":"Construction"},{"location":"regions/region2/#construction-examples","text":"Given a grid with integer axes, this code describes the region that starts at (1, 2) , is 3 units wide and 4 units tall: from bounden import Region2 region = Region2 [ int , int ](( 1 , 2 ), ( 3 , 4 )) # 0 1 2 3 4 5 # 0 . . . . . . # 1 . . . . . . # 2 . [x x x] . . # 3 . [x x x] . . # 4 . [x x x] . . # 5 . [x x x] . . # 6 . . . . . . Given a grid with a string y axis and integer x axis, this code describes the region that starts at (B, 2) , is 3 units wide and 4 units tall: from bounden import Region region = Region2 [ str , int ](( 1 , 2 ), ( 3 , 4 )) # A B C D E F # 0 . . . . . . # 1 . . . . . . # 2 . [x x x] . . # 3 . [x x x] . . # 4 . [x x x] . . # 5 . [x x x] . . # 6 . . . . . .","title":"Construction examples"},{"location":"regions/region2/#properties","text":"The region's position is read from the position property. The region's width and height are read from the width and height properties.","title":"Properties"}]}